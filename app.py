import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# --- BaÅŸlÄ±k ve AÃ§Ä±klama ---
st.title("Churn Tahmini ve Kampanya Ã–nerisi UygulamasÄ±ğŸ’¸")
st.write("Bu uygulama, mÃ¼ÅŸterilerin churn olup olmayacaÄŸÄ±nÄ± tahmin eder ve kampanya Ã¶nerileri sunar.")

# --- Veri YÃ¼kleme ---
uploaded_file = st.file_uploader("Veri DosyasÄ±nÄ± YÃ¼kleyin (CSV)", type=["csv"])

# --- Veriyi HazÄ±rlama Fonksiyonu ---
@st.cache_data
def prepare_data(data):
    """Veriyi iÅŸler ve eÄŸitim iÃ§in hazÄ±rlar."""
    X = data.drop(['RowNumber', 'CustomerId', 'Surname', 'Exited'], axis=1)
    X = pd.get_dummies(X, drop_first=True)  # One-Hot Encoding
    y = data['Exited']
    return X, y

# --- Model EÄŸitme Fonksiyonu ---
@st.cache_resource
def train_model(X_train, y_train):
    """Random Forest modelini eÄŸitir ve dÃ¶ndÃ¼rÃ¼r."""
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)
    return model

# --- Kampanya Ã–nerisi Fonksiyonu ---
def suggest_campaign(churn_customers):
    """Kampanya Ã¶nerilerini Ã¼retir."""
    suggestions = churn_customers.copy()
    suggestions['Kampanya Ã–nerisi'] = "Ã–zel Banka Faiz Ä°ndirimi"
    return suggestions

# --- Uygulama AkÄ±ÅŸÄ± ---
if uploaded_file:
    # Veriyi yÃ¼kleyip ekrana yazdÄ±rma
    data = pd.read_csv(uploaded_file)
    st.write("YÃ¼klenen Veri:")
    st.dataframe(data.head())

    # Veriyi hazÄ±rla
    X, y = prepare_data(data)

    # Veriyi eÄŸitim ve test olarak bÃ¶l
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    # Modeli eÄŸit
    model = train_model(X_train, y_train)

    # Tahmin yap
    y_pred = model.predict(X_test)

    # PerformansÄ± deÄŸerlendir
    report = classification_report(y_test, y_pred, output_dict=True)
    st.subheader("Model Performans Raporu:")
    st.json(report)

    # Churn olacak mÃ¼ÅŸterileri belirleme ve kampanya Ã¶nerisi sunma
    X_test['Churn Tahmini'] = y_pred
    churn_customers = X_test[X_test['Churn Tahmini'] == 1]
    st.subheader("Churn Olacak MÃ¼ÅŸteriler ve Kampanya Ã–nerileri:")
    suggested_campaigns = suggest_campaign(churn_customers)
    st.dataframe(suggested_campaigns)
else:
    st.write("LÃ¼tfen bir CSV dosyasÄ± yÃ¼kleyin.")
